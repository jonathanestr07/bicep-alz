---
name: '$(Date:ddMMyy).$(Rev:rr)-Repository Management'

trigger:
  schedules:
    - cron: '0 8 * * 1' # Every Monday at 8am UTC
      branches:
        include:
          - main
      always: true

pr: none

pool:
  vmImage: 'ubuntu-latest'

variables:
  remote_ALZ_repository: 'Azure/Enterprise-Scale'
  remote_ALZ_branch_name: 'improvement/policy-library'

stages:
  - stage: RepositoryManagement
    displayName: 'Repository Management'
    jobs:
      - job: bicep_unit_tests
        displayName: 'Bicep Build & Lint'
        steps:
          # Checkout repository (similar to actions/checkout@v4)
          - checkout: self
            persistCredentials: true
            fetchDepth: 0

          # List Bicep Version
          - script: |
              echo "=====> Currently installed Bicep version (if any) <====="
              bicep --version || echo "Bicep not installed"
            displayName: 'Get current Bicep Version'

          # Install latest Bicep
          - script: |
              echo "Installing latest Bicep version..."
              curl -Lo bicep https://github.com/Azure/bicep/releases/latest/download/bicep-linux-x64
              chmod +x ./bicep
              sudo mv ./bicep /usr/local/bin/bicep
              echo "=====> Installed Bicep <====="
              bicep --version
            displayName: 'Install latest Bicep version'

          # Build & Lint
          - script: |
              echo "Building & Linting Bicep modules..."
              pwsh -Command '
                $output = @()
                Get-ChildItem -Recurse -Filter "*.bicep" | ForEach-Object {
                  Write-Host "==> Attempting Bicep Build For File: $($_.FullName)"
                  $bicepOutput = bicep build $_.FullName 2>&1
                  if ($LASTEXITCODE -ne 0) {
                    $output += "$($bicepOutput)`r`n"
                  }
                  else {
                    Write-Host "✅ $($_.FullName)"
                  }
                }
                if ($output.Length -gt 0) {
                  throw "Bicep build failed:`r`n$output"
                }
              '
            displayName: 'Build & Lint Bicep Modules'

          # Create Azure Board Bug if build fails
          - script: |
              echo "Bicep Build failed. Creating Azure Board Bug..."
              az boards work-item create \
                --title "❌ Bicep Build failing" \
                --type "Bug" \
                --description "Check the pipeline run: $(System.TeamFoundationCollectionUri)$(System.TeamProject)/_build/results?buildId=$(Build.BuildId)" \
                --assigned-to "$(Build.RequestedFor)" \
                --project "$(System.TeamProject)"
            env:
              AZURE_DEVOPS_EXT_PAT: $(System.AccessToken)
            displayName: 'Create Azure Board Bug'
            condition: failed()

      - job: update_policy_templates
        displayName: 'Update Policy Library'
        steps:
          # Checkout local repository
          - checkout: self
            path: 'localRepo'
            fetchDepth: 0
            persistCredentials: true

          # Clone the remote ALZ repo (with branch info in pipeline variables)
          - script: |
              echo "Cloning ALZ repo from https://github.com/$(remote_ALZ_repository)..."
              git clone --depth 1 https://github.com/$(remote_ALZ_repository) $(Agent.BuildDirectory)/remoteRepo

              ls -la $(Agent.BuildDirectory)/remoteRepo

            displayName: 'Checkout ALZ repo'

          # Create or check out the branch
          - script: |
              cd localRepo
              git config user.name "AzureDevOps-Bot"
              git config user.email "devops@azure.com"

              branchName="$(remote_ALZ_branch_name)"

              echo "Checking if branch $branchName exists on remote..."
              if git ls-remote --exit-code . origin/$branchName; then
                echo "Branch $branchName exists on origin => checking out tracking branch..."
                git checkout -b $branchName --track origin/$branchName
              else
                echo "Branch $branchName does NOT exist => creating new local branch..."
                git checkout -b $branchName
              fi
            displayName: 'Create and check out the branch'

            # Install and import required modules
          - powershell: |
              $RequiredModules = @(
                'Az.Accounts',
                'Az.Resources'
              )

              # Install and import required modules
              foreach ($ModuleName in $RequiredModules) {
                try {
                  Write-Host "Installing $ModuleName..."
                  Install-Module -Name $ModuleName -Force -AllowClobber
                  Write-Host "Importing $ModuleName..."
                  Import-Module -Name $ModuleName
                }
                catch {
                  Write-Error "Failed to install or import"
                  throw
                }
              }
            displayName: 'Install and import required modules for Invoke-LibraryUpdate.ps1'

          # Run ./scripts/Invoke-LibraryUpdate.ps1
          - task: PowerShell@2
            displayName: 'Run Invoke-LibraryUpdate.ps1'
            inputs:
              azurePowerShellVersion: 'LatestVersion'
              ScriptType: 'FilePath'
              FilePath: '$(Agent.BuildDirectory)/localRepo/scripts/Invoke-LibraryUpdate.ps1'
              Arguments: |
                -AlzToolsPath "$(Agent.BuildDirectory)/remoteRepo/src/Alz.Tools" `
                -TargetPath "$(Agent.BuildDirectory)/localRepo" `
                -SourcePath "$(Agent.BuildDirectory)/remoteRepo"
              UsePowerShellCore: true

          # Run ./scripts/Invoke-PolicyToBicep.ps1
          - task: PowerShell@2
            displayName: 'Run Invoke-PolicyToBicep.ps1'
            inputs:
              azurePowerShellVersion: 'LatestVersion'
              ScriptType: 'FilePath'
              FilePath: '$(Agent.BuildDirectory)/localRepo/scripts/Invoke-PolicyToBicep.ps1'
              UsePowerShellCore: true

          # Check for changes and set variable
          - script: |
              cd $(Agent.BuildDirectory)/localRepo
              git status -s
              COUNT=$(git status -s | wc -l)
              echo "Detected $COUNT changed files."
              echo "##vso[task.setvariable variable=CHANGED_FILES]$COUNT"
            displayName: 'Check for changes'

          # Commit & push
          - script: |
              cd $(Agent.BuildDirectory)/localRepo
              if [ $(CHANGED_FILES) -gt 0 ]; then
                echo "Pushing changes to origin..."
                git add src/modules/policy/definitions/lib
                git add src/modules/policy/assignments/lib
                git commit -m "Update Policy Library $(Build.BuildId) (automated)"
                git push origin $(remote_ALZ_branch_name)
              else
                echo "No changes => skipping push."
              fi
            displayName: 'Git commit & push'

          # Create pull request
          - script: |
              if [ $(CHANGED_FILES) -gt 0 ]; then
                echo "Creating pull request..."

                az repos pr create \
                  --repository "$(Build.Repository.Name)" \
                  --source-branch "$(remote_ALZ_branch_name)" \
                  --target-branch main \
                  --title "Update Policy Library [Automated]" \
                  --description $'## Azure Policy Library Update
              🤖 This is an automated **pull request** containing updates to the library templates stored in `~/modules/policy/definitions/lib`.
              > **Note:** This PR was created by the **repository-management** pipeline.
              > **Important Note:** This PR may contain breaking changes, please review carefully and test before merging.
              ### 🔧 Type of Change
                - [ ] 🪲 Bug Fix
                - [x] 🤩 Improvement to the IP
                - [ ] 📝 Adding a feature
              ### ✅ Checklist
                - [x] Code has been tested locally
                - [x] Documentation has been updated (if applicable)
                - [x] All tests pass
                - [x] No new linting errors
                - [x] Follows the coding style guidelines'
              else
                echo "No changes => skipping PR creation."
              fi
            env:
              AZURE_DEVOPS_EXT_PAT: $(System.AccessToken)
            displayName: 'Create pull request'
