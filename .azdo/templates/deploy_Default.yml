parameters:
  - name: dependsOn
    type: object
    default: []
  - name: condition
    default: true
  - name: serviceConnection
    type: string
  - name: workingDirectory
    type: string
    default: infrastructure
  - name: environmentName
    type: string
  - name: location
    type: string
  - name: templateFile
    type: string
  - name: templateParameterFile
    type: string
  - name: moduleName
    type: string
  - name: whatIf
    type: boolean
    default: false
  - name: deploymentLevel
    type: string
    default: managementGroup
  - name: resourceGroupName
    type: string
    default:
  - name: managementGroupId
    type: string
    default:
  - name: jobId
    type: string
    default: '1'
  - name: jobName
    type: string
    default: 'Deploy'
  - name: ifBoolean
    type: boolean
    default: true

stages:
  - stage: ${{ parameters.jobName }}
    displayName: Deploy ${{ parameters.moduleName }}
    condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
    dependsOn: ${{ parameters.dependsOn }}
    jobs:
      - deployment: Deploy
        condition: ${{ parameters.ifBoolean }}
        displayName: Deploy
        environment: ${{ parameters.environmentName }}
        variables:
          - name: sourceDirectory
            value: '$(Pipeline.Workspace)/${{ parameters.workingDirectory }}/s'
        pool:
          vmImage: ubuntu-latest

        strategy:
          runOnce:
            deploy:
              steps:
                # Set Partner Admin Link (PAL)
                - task: AzureCLI@2
                  displayName: Set PAL
                  inputs:
                    azureSubscription: ${{ parameters.serviceConnection }}
                    scriptType: pscore
                    scriptLocation: inlineScript
                    inlineScript: |
                      az extension add --name managementpartner
                      az managementpartner update --partner-id 1158331 || az managementpartner create --partner-id 1158331

                # Deploy
                - task: AzureCLI@2
                  displayName: 'Deploy ${{ parameters.moduleName }}'
                  name: ${{ parameters.jobName }}
                  inputs:
                    azureSubscription: ${{ parameters.serviceConnection }}
                    scriptType: 'bash'
                    scriptLocation: inlineScript
                    inlineScript: |
                      az config set bicep.use_binary_from_path=false
                      moduleName="${{ parameters.moduleName }}"
                      deploymentLevel="${{ parameters.deploymentLevel }}"
                      location="${{ parameters.location }}"
                      src_templateFile="${{ parameters.templateFile }}"
                      templateFile="$(sourceDirectory)${src_templateFile:1}"
                      src_templateParameterFile="${{ parameters.templateParameterFile }}"
                      templateParameterFile="$(sourceDirectory)${src_templateParameterFile:1}"
                      managementGroupId="${{ parameters.managementGroupId }}"

                      resourceGroupName="${{ parameters.resourceGroupName }}"

                      moduleNameSanitized=$(echo "$moduleName" | sed 's/ /_/g')
                      DEPLOYMENTJOBID="alz-${moduleNameSanitized}-${{ parameters.jobId }}"

                      if [ ${{parameters.whatIf }} == 'true' ]; then
                        if [ "$deploymentLevel" == 'tenant' ]; then
                          echo "➡️ Tenant Deployment - WhatIf "
                          az deployment tenant what-if -n $DEPLOYMENTJOBID -l $location -f $templateFile -p $templateParameterFile -x Ignore NoChange Unsupported -r FullResourcePayloads
                        elif [ "$deploymentLevel" == 'subscription' ]; then
                          echo "➡️ Subscription Deployment - WhatIf "
                          az deployment sub what-if -n $DEPLOYMENTJOBID -l $location -f $templateFile -p $templateParameterFile -x Ignore NoChange Unsupported -r FullResourcePayloads
                        elif [ "$deploymentLevel" == 'resourceGroup' ]; then
                          echo "➡️ Resource Group Deployment - WhatIf "
                          az deployment group what-if -n $DEPLOYMENTJOBID -g $resourceGroupName -f $templateFile -p $templateParameterFile -x Ignore NoChange Unsupported -r FullResourcePayloads
                        else
                          echo "➡️ Management Group Deployment - WhatIf "
                          az deployment mg what-if -n $DEPLOYMENTJOBID -m $managementGroupId -l $location -f $templateFile -p $templateParameterFile -x Ignore NoChange Unsupported -r FullResourcePayloads
                        fi
                      fi

                      if [ "$deploymentLevel" == 'tenant' ]; then
                        echo "↗️ Tenant Deployment"
                        az deployment tenant create -n $DEPLOYMENTJOBID -l $location -f $templateFile -p $templateParameterFile
                      elif [ "$deploymentLevel" == 'subscription' ]; then
                        echo "↗️ Subscription Deployment"
                        az deployment sub create -n $DEPLOYMENTJOBID -l $location -f $templateFile -p $templateParameterFile
                      elif [ "$deploymentLevel" == 'resourceGroup' ]; then
                        echo "↗️ Resource Group Deployment"
                        az deployment group create -n $DEPLOYMENTJOBID -g $resourceGroupName -f $templateFile -p $templateParameterFile
                      else
                        echo "↗️ Management Group Deployment"
                        az deployment mg create -n $DEPLOYMENTJOBID -m $managementGroupId -l $location -f $templateFile -p $templateParameterFile
                      fi
                    powerShellErrorActionPreference: 'stop'
