parameters:
  - name: dependsOn
    type: object
    default: []
  - name: condition
    default: true
  - name: serviceConnection
    type: string
  - name: workingDirectory
    type: string
    default: artifact
  - name: environmentName
    type: string
  - name: location
    type: string
  - name: managementGroupId
    type: string
  - name: templateFile_policyDefinitions
    type: string
  - name: templateFile_policyAssignments
    type: string
  - name: templateFile_policyAssignmentsCustom
    type: string
  - name: templateFile_policyExemptions
    type: string
  - name: templateParameterFile_policyDefinitions
    type: string
  - name: templateParameterFile_policyAssignments
    type: string
  - name: templateParameterFile_policyAssignmentsCustom
    type: string
  - name: templateParameterFile_policyExemptions
    type: string
  - name: moduleName
    type: string
  - name: whatIf
    type: boolean
    default: false
  - name: deploymentLevel
    type: string
    default: managementGroup
  - name: policyExemptions
    type: boolean
    default: false
  - name: jobId
    type: string
    default: '1'
  - name: jobName
    type: string
    default: 'Deploy'

stages:
  - stage: ${{ parameters.jobName }}
    displayName: Deploy ${{ parameters.moduleName }}
    condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
    dependsOn: ${{ parameters.dependsOn }}
    jobs:
      - deployment: Deploy
        displayName: Deploy
        environment: ${{ parameters.environmentName }}
        variables:
          - name: sourceDirectory
            value: '$(Pipeline.Workspace)/${{ parameters.workingDirectory }}/s'
        pool:
          vmImage: ubuntu-latest
        strategy:
          runOnce:
            deploy:
              steps:
                # Set Partner Admin Link (PAL)
                - task: AzureCLI@2
                  displayName: Set PAL
                  inputs:
                    azureSubscription: ${{ parameters.serviceConnection }}
                    scriptType: pscore
                    scriptLocation: inlineScript
                    inlineScript: |
                      az extension add --name managementpartner
                      az managementpartner update --partner-id 1158331 || az managementpartner create --partner-id 1158331

                # Deploy Azure Policy Definitions
                - task: AzureCLI@2
                  displayName: Deploy Azure Policy Definitions
                  name: policyDefinitions
                  inputs:
                    azureSubscription: ${{ parameters.serviceConnection }}
                    scriptType: 'bash'
                    scriptLocation: inlineScript
                    inlineScript: |
                      managementGroupId="${{ parameters.managementGroupId }}"
                      location="${{ parameters.location }}"
                      src_templateFile="${{ parameters.templateFile_policyDefinitions }}"
                      templateFile="$(sourceDirectory)${src_templateFile:1}"
                      src_templateParameterFile="${{ parameters.templateParameterFile_policyDefinitions }}"
                      templateParameterFile="$(sourceDirectory)${src_templateParameterFile:1}"

                      DEPLOYMENTJOBID="alz-policy-definitions-${{ parameters.jobId }}"

                      if [ ${{ parameters.whatIf }} == 'true' ]; then
                        az deployment mg what-if -n $DEPLOYMENTJOBID -m $managementGroupId -l $location -f $templateFile -p $templateParameterFile -x Ignore NoChange Unsupported -r FullResourcePayloads
                        az deployment mg create -n $DEPLOYMENTJOBID -m $managementGroupId -l $location -f $templateFile -p $templateParameterFile
                      else
                        az deployment mg create -n $DEPLOYMENTJOBID -m $managementGroupId -l $location -f $templateFile -p $templateParameterFile
                      fi
                    powerShellErrorActionPreference: 'stop'

                # Deploy Azure Policy Assignments
                - task: AzureCLI@2
                  displayName: Deploy Azure Policy Assignments - ALZ default
                  name: policyAssignments
                  inputs:
                    azureSubscription: ${{ parameters.serviceConnection }}
                    scriptType: 'bash'
                    scriptLocation: inlineScript
                    inlineScript: |
                      managementGroupId="${{ parameters.managementGroupId }}"
                      location="${{ parameters.location }}"
                      src_templateFile="${{ parameters.templateFile_policyAssignments }}"
                      templateFile="$(sourceDirectory)${src_templateFile:1}"
                      src_templateParameterFile="${{ parameters.templateParameterFile_policyAssignments }}"
                      templateParameterFile="$(sourceDirectory)${src_templateParameterFile:1}"

                      DEPLOYMENTJOBID="alz-policy-assignments-${{ parameters.jobId }}"

                      if [ ${{ parameters.whatIf }} == 'true' ]; then
                        az deployment mg what-if -n $DEPLOYMENTJOBID -m $managementGroupId -l $location -f $templateFile -p $templateParameterFile -x Ignore NoChange Unsupported -r FullResourcePayloads
                        az deployment mg create -n $DEPLOYMENTJOBID -m $managementGroupId -l $location -f $templateFile -p $templateParameterFile
                      else
                        az deployment mg create -n $DEPLOYMENTJOBID -m $managementGroupId -l $location -f $templateFile -p $templateParameterFile
                      fi
                    powerShellErrorActionPreference: 'stop'

                # Deploy Azure Policy Assignments - Custom
                - task: AzureCLI@2
                  displayName: Deploy Azure Policy Assignments - Custom
                  name: policyAssignmentsCustom
                  inputs:
                    azureSubscription: ${{ parameters.serviceConnection }}
                    scriptType: 'bash'
                    scriptLocation: inlineScript
                    inlineScript: |
                      az config set bicep.use_binary_from_path=false
                      managementGroupId="${{ parameters.managementGroupId }}"
                      location="${{ parameters.location }}"
                      src_templateFile="${{ parameters.templateFile_policyAssignmentsCustom }}"
                      templateFile="$(sourceDirectory)${src_templateFile:1}"
                      src_templateParameterFile="${{ parameters.templateParameterFile_policyAssignmentsCustom }}"
                      templateParameterFile="$(sourceDirectory)${src_templateParameterFile:1}"

                      DEPLOYMENTJOBID="alz-policy-assignments-insight-${{ parameters.jobId }}"

                      if [ ${{ parameters.whatIf }} == 'true' ]; then
                        az deployment mg what-if -n $DEPLOYMENTJOBID -m $managementGroupId -l $location -f $templateFile -p $templateParameterFile -x Ignore NoChange Unsupported -r FullResourcePayloads
                        az deployment mg create -n $DEPLOYMENTJOBID -m $managementGroupId -l $location -f $templateFile -p $templateParameterFile
                      else
                        az deployment mg create -n $DEPLOYMENTJOBID -m $managementGroupId -l $location -f $templateFile -p $templateParameterFile
                      fi
                    powerShellErrorActionPreference: 'stop'

                # Policy Exemptions
                - task: AzureCLI@2
                  displayName: Deploy Azure Policy Exemptions
                  name: policyExemptions
                  condition: eq('${{ parameters.policyExemptions }}', true)
                  inputs:
                    azureSubscription: ${{ parameters.serviceConnection }}
                    scriptType: 'bash'
                    scriptLocation: inlineScript
                    inlineScript: |
                      managementGroupId="${{ parameters.managementGroupId }}"
                      location="${{ parameters.location }}"
                      src_templateFile="${{ parameters.templateFile_policyExemptions }}"
                      templateFile="$(sourceDirectory)${src_templateFile:1}"
                      src_templateParameterFile="${{ parameters.templateParameterFile_policyExemptions }}"
                      templateParameterFile="$(sourceDirectory)${src_templateParameterFile:1}"

                      DEPLOYMENTJOBID="alz-policy-exemptions-${{ parameters.jobId }}"

                      if [ ${{ parameters.whatIf }} == 'true' ]; then
                        az deployment mg what-if -n $DEPLOYMENTJOBID -m $managementGroupId -l $location -f $templateFile -p $templateParameterFile -x Ignore NoChange Unsupported -r FullResourcePayloads
                        az deployment mg create -n $DEPLOYMENTJOBID -m $managementGroupId -l $location -f $templateFile -p $templateParameterFile
                      else
                        az deployment mg create -n $DEPLOYMENTJOBID -m $managementGroupId -l $location -f $templateFile -p $templateParameterFile
                      fi
                    powerShellErrorActionPreference: 'stop'

                - task: AzurePowerShell@5
                  displayName: Invoke Azure Policy Remediation for non-compliant resources
                  inputs:
                    azureSubscription: ${{ parameters.serviceConnection }}
                    ScriptType: 'FilePath'
                    ScriptPath: './scripts/Invoke-AzurePolicyRemediationDINE.ps1'
                    azurePowerShellVersion: 'LatestVersion'
